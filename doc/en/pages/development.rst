====================
Development
====================


Get the THRotator source code
==================================

Source code of THRotator can be downloaded from `GitHub <https://github.com/massanoori/THRotator>`_.

If you just try to build or modify THRotator,
you can directly download from GitHub.
By clicking ``Clone or download`` and then clicking ``Download ZIP``, the download will start.
By extracting the downloaded ZIP file, the folder containing source code is created.

If you have installed git on your PC,
you can clone the repository from the URL shown after clicking ``Clone or download``.


Build THRotator
====================

In this section, a procedure to build THRotator from source code is given.

The prerequisites are the following:

* Microsoft Visual C++ (2012 or later)
* Boost C++ Libraries
* CMake

Install Microsoft Visual C++
-----------------------------------------

.. note:: If you have installed it, skip this step.

Download Visual Studio from `Home page of Visual Studio <https://www.visualstudio.com/>`_.
Community Editon is just enough.

Visual Studio 2015 and later skip installing Visual C++ by default,
edit the installation option so that Visual C++ is installed.

Install Boost C++ Libraries
-----------------------------------------

.. note:: If you have a built ``filesystem`` module, skip this step.

Access to `Boost C++ Libraries <http://www.boost.org/>`_ and download the latest release from **Current Release**.
Then extract ZIP archive to some location (for example ``C:\boost\``).

Next, build ``filesystem`` module of boost.

1. If your system is x64-based, ``Start Menu`` → ``Visual Studio 20XX`` → ``VS20XX x64 Native Tools Command Prompts``.
   If your system is x86-based, launch ``VS20XX x86 Native Tools Command Prompts``.
2. On the opened command prompt, change directory to the location where extracted ``bootstrap.bat`` exists.
3. Run ``bootstrap.bat``.
4. ``b2.exe`` will be generatd, then run ``b2 --with-filesystem runtime-link=shared,static``.

Install CMake
------------------------

.. note:: If you have installed CMake 3.5 or later, skip this step.

Access to `Home page of CMake <https://cmake.org/>`_. Then download one of the following from **Download** page.

* Windows win64-x64 Installer
* Windows win64-x64 ZIP
* Windows win32-x86 Installer
* Windows win32-x86 ZIP

If you are using x64-based system, you can use both win64-x64 and win32-x86.
If you are using x86-based system, you can use only win32-x86.

.. _devel_proj_gen:


Generate project files
---------------------------

1. If you installed CMake from installer, ``Start Menu`` → ``CMake`` → ``CMake (cmake-gui)``.
   If you downloaded CMake directly from, run ``bin\cmake-gui.exe``.
2. Set the location of THRotator source code to ``Where is the source code:``.
3. Set the location of project files you want to generate to ``Where to build the binaries:``.
4. Press ``Configure``. Then generator selection window appears. Choose ``Visual Studio XX 20XX`` and press ``Finish``.
   Don't choose a generator name containing Win64 or ARM.
5. Set the boost installation directory (where bootstrap.bat exists) to ``BOOST_INCLUDE_DIR``.
6. Set the boost library directory (``<boost install directory>\stage\lib`` by default) to ``BOOST_LIB_DIR``.
7. Press ``Configure`` again. If you don't see any errors, press ``Generate``.


Build
---------------------------------

1. Open generated ``THRotator.sln``.
2. Five projects are loaded.
 
  * ALL_BUILD (project to build all the other projects)
  * d3d8 (THRotator based on Direct3D 8)
  * d3d9 (THRotator based on Direct3D 9)
  * localization_en-US (English resource DLL of THRotator)
  * ZERO_CHECK (automatically generated by CMake)

3. Build ``d3d8`` for THRotator based on Direct3D 8, build ``d3d9`` for THRotator based on Direct3D 9.


Build document
====================

Sphinx is used to build the documentation of THRotator.

Install Sphinx
------------------------

See http://www.sphinx-doc.org/en/stable/install.html .

Install a theme of Sphinx
------------------------------

THRotator adopts a theme `sphinx_rtd_theme <https://github.com/rtfd/sphinx_rtd_theme>`_.
To install it, run ``python -m pip install sphinx_rtd_theme``.

Build
----------------------------

Run ``doc/<language>/make.bat html``.
Then the documentation in HTML format is generated in ``doc/<language>/_build``.


Localization
=============

THRotatorはWindowsのMultilingual User Interface (MUI)による、
GUIやエラーメッセージの多言語化が可能です。

新しい言語を追加する際は、英語版のリソースをテンプレートとして容易に作成可能です。
フランス語を追加することを例に、作成の流れを見ていきましょう。

.. note:: This section doesn't refer to the actual translation.

1. Copy template
-----------------------------

1. まず、ひな型となる ``localization_en-US`` があるフォルダに、
   新しく ``localization_<言語名>`` を作成します。
   言語名は、 `Available Language Packs for Windows <https://technet.microsoft.com/en-us/library/hh825678.aspx>`_ の **Language/culture name** です。
   また、このページには **Language hexadecimal identifier** に言語IDも記載されていますので、このIDもメモしておきます。
   今回はフランス語を例としていますので、 ``localization_fr-FR`` を作成します。
   また、言語IDの **0x040c** をメモしておきます。
2. ``localization_en-US`` の中にある、 ``CMakeLists.txt`` 、 ``resource.h`` 、 ``THRotator_en-US.rc`` を、
   新たに作成した ``localization_<言語名>`` (今回は ``localization_fr-FR``) にコピーします。
3. ``localization_<言語名>\THRotator_en-US.rc`` を、 ``localization_<言語名>\THRotator_<言語名>.rc`` (今回は ``THRotator_fr-FR.rc``)にリネームします。


2. Prepare for CMake
--------------------------

1. ``localization_<言語名>\CMakeLists.txt`` を開き、 ``en-US`` となっている部分を、 ``<言語名>`` に置換します。
   また、 ``set(language_id 0x0409)`` の **0x0409** を、メモしておいた言語IDに置き換えます。
   今回は言語IDが **0x040c** なので、 ``set(language_id 0x040c)`` に変更します。
   ``localization_<言語名>\CMakeLists.txt`` の編集は以上です。
2. ソースコードのルートフォルダにある ``CMakeLists.txt`` を開き、

フランス語の例では、``localization_fr-FR\CMakeLists.txt`` の中身は次のようになります。 ::

    # resource language and its ID
    # for a list of languages and IDs, visit https://msdn.microsoft.com/en-us/library/hh825678.aspx
    set(language fr-FR)
    set(language_id 0x040c)

    include(../internationalization/THRotator_i18n.cmake)
	
また、ルートフォルダにある ``CMakeLists.txt`` の中身は次のようになります。 ::

    # 省略
	
    add_subdirectory(d3d9)
    add_subdirectory(d3d8)
    add_subdirectory(localization_en-US)
    add_subdirectory(localization_fr-FR) # Added
	
3. Generate project files
----------------------------------

本ページの :ref:`devel_proj_gen` で説明している方法で、プロジェクトファイルを生成します。

4. Translate
-----------------

``THRotator.sln`` を開きなおすか、再読み込みすると、
プロジェクト ``localization_<言語名>`` が追加されているはずです。

Visual Studioのリソースビューを開き、
``localization_<言語名>`` の中にあるString Tableやダイアログリソースを翻訳していきます。
String Tableやダイアログリソースのプロパティの ``Language`` が、 ``英語 (米国)`` になっていますので、
翻訳先の言語に変更してください。フランス語の例では、 ``フランス語 (フランス)`` に変更します。

5. Build and launch
-------------------

プロジェクト ``localization_<言語名>`` をビルドすると、
``d3d8.dll`` 、 ``d3d9.dll`` の出力ディレクトリに言語名のフォルダができ、その中に ``.mui`` ファイルが出来上がります。

``d3d8.dll`` または ``d3d9.dll`` と一緒に、言語名のフォルダもゲームの実行ファイルのフォルダにコピーします。
そのままゲームを実行すると、お使いのPCにその言語が存在すれば、THRotatorのGUIやメッセージがその言語で表示されるようになります。


.. note::

   d3d8.dll.muiまたはd3d9.dll.muiには、それぞれd3d8.dll、d3d9.dllのチェックサムが埋め込まれます。
   .dllのチェックサムと.muiに埋め込まれたチェックサムが異なる場合は、言語の読み込みが失敗してしまいます。
